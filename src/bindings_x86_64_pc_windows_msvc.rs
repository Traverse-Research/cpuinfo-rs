/* automatically generated by rust-bindgen 0.71.1 */

#![allow(non_upper_case_globals, non_snake_case, non_camel_case_types)]
#![allow(dead_code)]

pub const _VCRT_COMPILER_PREPROCESSOR: u32 = 1;
pub const _SAL_VERSION: u32 = 20;
pub const __SAL_H_VERSION: u32 = 180000000;
pub const _USE_DECLSPECS_FOR_SAL: u32 = 0;
pub const _USE_ATTRIBUTES_FOR_SAL: u32 = 0;
pub const _CRT_PACKING: u32 = 8;
pub const _HAS_EXCEPTIONS: u32 = 1;
pub const NULL: u32 = 0;
pub const _HAS_CXX17: u32 = 0;
pub const _HAS_CXX20: u32 = 0;
pub const _HAS_CXX23: u32 = 0;
pub const _HAS_CXX26: u32 = 0;
pub const _HAS_NODISCARD: u32 = 1;
pub const WCHAR_MIN: u32 = 0;
pub const WCHAR_MAX: u32 = 65535;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 65535;
pub const CPUINFO_ARCH_X86_64: u32 = 1;
pub const CPUINFO_ARCH_X86: u32 = 0;
pub const CPUINFO_ARCH_ARM: u32 = 0;
pub const CPUINFO_ARCH_ARM64: u32 = 0;
pub const CPUINFO_ARCH_PPC64: u32 = 0;
pub const CPUINFO_ARCH_ASMJS: u32 = 0;
pub const CPUINFO_ARCH_WASM: u32 = 0;
pub const CPUINFO_ARCH_WASMSIMD: u32 = 0;
pub const CPUINFO_ARCH_RISCV32: u32 = 0;
pub const CPUINFO_ARCH_RISCV64: u32 = 0;
pub const CPUINFO_CACHE_UNIFIED: u32 = 1;
pub const CPUINFO_CACHE_INCLUSIVE: u32 = 2;
pub const CPUINFO_CACHE_COMPLEX_INDEXING: u32 = 4;
pub const CPUINFO_PAGE_SIZE_4KB: u32 = 4096;
pub const CPUINFO_PAGE_SIZE_1MB: u32 = 1048576;
pub const CPUINFO_PAGE_SIZE_2MB: u32 = 2097152;
pub const CPUINFO_PAGE_SIZE_4MB: u32 = 4194304;
pub const CPUINFO_PAGE_SIZE_16MB: u32 = 16777216;
pub const CPUINFO_PAGE_SIZE_1GB: u32 = 1073741824;
pub const CPUINFO_PACKAGE_NAME_MAX: u32 = 48;
pub type va_list = *mut ::std::os::raw::c_char;
extern "C" {
    pub fn __va_start(arg1: *mut va_list, ...);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __vcrt_va_list_is_reference {
    pub _address: u8,
}
pub const __vcrt_va_list_is_reference___the_value: __vcrt_va_list_is_reference__bindgen_ty_1 =
    false;
pub type __vcrt_va_list_is_reference__bindgen_ty_1 = bool;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __vcrt_assert_va_start_is_not_reference {
    pub _address: u8,
}
pub type __vcrt_bool = bool;
extern "C" {
    pub fn __security_init_cookie();
}
extern "C" {
    pub fn __security_check_cookie(_StackCookie: usize);
}
extern "C" {
    pub fn __report_gsfailure(_StackCookie: usize) -> !;
}
extern "C" {
    pub static mut __security_cookie: usize;
}
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_longlong;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulonglong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_int;
pub type int_fast32_t = ::std::os::raw::c_int;
pub type int_fast64_t = ::std::os::raw::c_longlong;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_uint;
pub type uint_fast32_t = ::std::os::raw::c_uint;
pub type uint_fast64_t = ::std::os::raw::c_ulonglong;
pub type intmax_t = ::std::os::raw::c_longlong;
pub type uintmax_t = ::std::os::raw::c_ulonglong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cpuinfo_cache {
    #[doc = " Cache size in bytes"]
    pub size: u32,
    #[doc = " Number of ways of associativity"]
    pub associativity: u32,
    #[doc = " Number of sets"]
    pub sets: u32,
    #[doc = " Number of partitions"]
    pub partitions: u32,
    #[doc = " Line size in bytes"]
    pub line_size: u32,
    #[doc = " Binary characteristics of the cache (unified cache, inclusive cache,\n cache with complex indexing).\n\n @see CPUINFO_CACHE_UNIFIED, CPUINFO_CACHE_INCLUSIVE,\n CPUINFO_CACHE_COMPLEX_INDEXING"]
    pub flags: u32,
    #[doc = " Index of the first logical processor that shares this cache"]
    pub processor_start: u32,
    #[doc = " Number of logical processors that share this cache"]
    pub processor_count: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cpuinfo_trace_cache {
    pub uops: u32,
    pub associativity: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cpuinfo_tlb {
    pub entries: u32,
    pub associativity: u32,
    pub pages: u64,
}
#[doc = " Processor vendor is not known to the library, or the library failed\nto get vendor information from the OS."]
pub const cpuinfo_vendor_cpuinfo_vendor_unknown: cpuinfo_vendor = 0;
#[doc = " Intel Corporation. Vendor of x86, x86-64, IA64, and ARM processor\n microarchitectures.\n\n Sold its ARM design subsidiary in 2006. The last ARM processor design\n was released in 2004."]
pub const cpuinfo_vendor_cpuinfo_vendor_intel: cpuinfo_vendor = 1;
#[doc = " Advanced Micro Devices, Inc. Vendor of x86 and x86-64 processor\nmicroarchitectures."]
pub const cpuinfo_vendor_cpuinfo_vendor_amd: cpuinfo_vendor = 2;
#[doc = " ARM Holdings plc. Vendor of ARM and ARM64 processor\nmicroarchitectures."]
pub const cpuinfo_vendor_cpuinfo_vendor_arm: cpuinfo_vendor = 3;
#[doc = " Qualcomm Incorporated. Vendor of ARM and ARM64 processor\nmicroarchitectures."]
pub const cpuinfo_vendor_cpuinfo_vendor_qualcomm: cpuinfo_vendor = 4;
#[doc = " Apple Inc. Vendor of ARM and ARM64 processor microarchitectures."]
pub const cpuinfo_vendor_cpuinfo_vendor_apple: cpuinfo_vendor = 5;
#[doc = " Samsung Electronics Co., Ltd. Vendir if ARM64 processor\nmicroarchitectures."]
pub const cpuinfo_vendor_cpuinfo_vendor_samsung: cpuinfo_vendor = 6;
#[doc = " Nvidia Corporation. Vendor of ARM64-compatible processor\nmicroarchitectures."]
pub const cpuinfo_vendor_cpuinfo_vendor_nvidia: cpuinfo_vendor = 7;
#[doc = " MIPS Technologies, Inc. Vendor of MIPS processor microarchitectures."]
pub const cpuinfo_vendor_cpuinfo_vendor_mips: cpuinfo_vendor = 8;
#[doc = " International Business Machines Corporation. Vendor of PowerPC\nprocessor microarchitectures."]
pub const cpuinfo_vendor_cpuinfo_vendor_ibm: cpuinfo_vendor = 9;
#[doc = " Ingenic Semiconductor. Vendor of MIPS processor microarchitectures."]
pub const cpuinfo_vendor_cpuinfo_vendor_ingenic: cpuinfo_vendor = 10;
#[doc = " VIA Technologies, Inc. Vendor of x86 and x86-64 processor\n microarchitectures.\n\n Processors are designed by Centaur Technology, a subsidiary of VIA\n Technologies."]
pub const cpuinfo_vendor_cpuinfo_vendor_via: cpuinfo_vendor = 11;
#[doc = " Cavium, Inc. Vendor of ARM64 processor microarchitectures."]
pub const cpuinfo_vendor_cpuinfo_vendor_cavium: cpuinfo_vendor = 12;
#[doc = " Broadcom, Inc. Vendor of ARM processor microarchitectures."]
pub const cpuinfo_vendor_cpuinfo_vendor_broadcom: cpuinfo_vendor = 13;
#[doc = " Applied Micro Circuits Corporation (APM). Vendor of ARM64 processor\nmicroarchitectures."]
pub const cpuinfo_vendor_cpuinfo_vendor_apm: cpuinfo_vendor = 14;
#[doc = " Huawei Technologies Co., Ltd. Vendor of ARM64 processor\n microarchitectures.\n\n Processors are designed by HiSilicon, a subsidiary of Huawei."]
pub const cpuinfo_vendor_cpuinfo_vendor_huawei: cpuinfo_vendor = 15;
#[doc = " Hygon (Chengdu Haiguang Integrated Circuit Design Co., Ltd), Vendor\n of x86-64 processor microarchitectures.\n\n Processors are variants of AMD cores."]
pub const cpuinfo_vendor_cpuinfo_vendor_hygon: cpuinfo_vendor = 16;
#[doc = " SiFive, Inc. Vendor of RISC-V processor microarchitectures."]
pub const cpuinfo_vendor_cpuinfo_vendor_sifive: cpuinfo_vendor = 17;
#[doc = " Texas Instruments Inc. Vendor of ARM processor microarchitectures."]
pub const cpuinfo_vendor_cpuinfo_vendor_texas_instruments: cpuinfo_vendor = 30;
#[doc = " Marvell Technology Group Ltd. Vendor of ARM processor\n microarchitectures."]
pub const cpuinfo_vendor_cpuinfo_vendor_marvell: cpuinfo_vendor = 31;
#[doc = " RDC Semiconductor Co., Ltd. Vendor of x86 processor\nmicroarchitectures."]
pub const cpuinfo_vendor_cpuinfo_vendor_rdc: cpuinfo_vendor = 32;
#[doc = " DM&P Electronics Inc. Vendor of x86 processor microarchitectures."]
pub const cpuinfo_vendor_cpuinfo_vendor_dmp: cpuinfo_vendor = 33;
#[doc = " Motorola, Inc. Vendor of PowerPC and ARM processor\nmicroarchitectures."]
pub const cpuinfo_vendor_cpuinfo_vendor_motorola: cpuinfo_vendor = 34;
#[doc = " Transmeta Corporation. Vendor of x86 processor microarchitectures.\n\n Now defunct. The last processor design was released in 2004.\n Transmeta processors implemented VLIW ISA and used binary translation\n to execute x86 code."]
pub const cpuinfo_vendor_cpuinfo_vendor_transmeta: cpuinfo_vendor = 50;
#[doc = " Cyrix Corporation. Vendor of x86 processor microarchitectures.\n\n Now defunct. The last processor design was released in 1996."]
pub const cpuinfo_vendor_cpuinfo_vendor_cyrix: cpuinfo_vendor = 51;
#[doc = " Rise Technology. Vendor of x86 processor microarchitectures.\n\n Now defunct. The last processor design was released in 1999."]
pub const cpuinfo_vendor_cpuinfo_vendor_rise: cpuinfo_vendor = 52;
#[doc = " National Semiconductor. Vendor of x86 processor microarchitectures.\n\n Sold its x86 design subsidiary in 1999. The last processor design was\n released in 1998."]
pub const cpuinfo_vendor_cpuinfo_vendor_nsc: cpuinfo_vendor = 53;
#[doc = " Silicon Integrated Systems. Vendor of x86 processor\n microarchitectures.\n\n Sold its x86 design subsidiary in 2001. The last processor design was\n released in 2001."]
pub const cpuinfo_vendor_cpuinfo_vendor_sis: cpuinfo_vendor = 54;
#[doc = " NexGen. Vendor of x86 processor microarchitectures.\n\n Now defunct. The last processor design was released in 1994.\n NexGen designed the first x86 microarchitecture which decomposed x86\n instructions into simple microoperations."]
pub const cpuinfo_vendor_cpuinfo_vendor_nexgen: cpuinfo_vendor = 55;
#[doc = " United Microelectronics Corporation. Vendor of x86 processor\n microarchitectures.\n\n Ceased x86 in the early 1990s. The last processor design was released\n in 1991. Designed U5C and U5D processors. Both are 486 level."]
pub const cpuinfo_vendor_cpuinfo_vendor_umc: cpuinfo_vendor = 56;
#[doc = " Digital Equipment Corporation. Vendor of ARM processor\n microarchitecture.\n\n Sold its ARM designs in 1997. The last processor design was released\n in 1997."]
pub const cpuinfo_vendor_cpuinfo_vendor_dec: cpuinfo_vendor = 57;
#[doc = " Vendor of processor core design"]
pub type cpuinfo_vendor = ::std::os::raw::c_int;
#[doc = " Microarchitecture is unknown, or the library failed to get\ninformation about the microarchitecture from OS"]
pub const cpuinfo_uarch_cpuinfo_uarch_unknown: cpuinfo_uarch = 0;
#[doc = " Pentium and Pentium MMX microarchitecture."]
pub const cpuinfo_uarch_cpuinfo_uarch_p5: cpuinfo_uarch = 1048832;
#[doc = " Intel Quark microarchitecture."]
pub const cpuinfo_uarch_cpuinfo_uarch_quark: cpuinfo_uarch = 1048833;
#[doc = " Pentium Pro, Pentium II, and Pentium III."]
pub const cpuinfo_uarch_cpuinfo_uarch_p6: cpuinfo_uarch = 1049088;
#[doc = " Pentium M."]
pub const cpuinfo_uarch_cpuinfo_uarch_dothan: cpuinfo_uarch = 1049089;
#[doc = " Intel Core microarchitecture."]
pub const cpuinfo_uarch_cpuinfo_uarch_yonah: cpuinfo_uarch = 1049090;
#[doc = " Intel Core 2 microarchitecture on 65 nm process."]
pub const cpuinfo_uarch_cpuinfo_uarch_conroe: cpuinfo_uarch = 1049091;
#[doc = " Intel Core 2 microarchitecture on 45 nm process."]
pub const cpuinfo_uarch_cpuinfo_uarch_penryn: cpuinfo_uarch = 1049092;
#[doc = " Intel Nehalem and Westmere microarchitectures (Core i3/i5/i7 1st\ngen)."]
pub const cpuinfo_uarch_cpuinfo_uarch_nehalem: cpuinfo_uarch = 1049093;
#[doc = " Intel Sandy Bridge microarchitecture (Core i3/i5/i7 2nd gen)."]
pub const cpuinfo_uarch_cpuinfo_uarch_sandy_bridge: cpuinfo_uarch = 1049094;
#[doc = " Intel Ivy Bridge microarchitecture (Core i3/i5/i7 3rd gen)."]
pub const cpuinfo_uarch_cpuinfo_uarch_ivy_bridge: cpuinfo_uarch = 1049095;
#[doc = " Intel Haswell microarchitecture (Core i3/i5/i7 4th gen)."]
pub const cpuinfo_uarch_cpuinfo_uarch_haswell: cpuinfo_uarch = 1049096;
#[doc = " Intel Broadwell microarchitecture."]
pub const cpuinfo_uarch_cpuinfo_uarch_broadwell: cpuinfo_uarch = 1049097;
#[doc = " Intel Sky Lake microarchitecture (14 nm, including\nKaby/Coffee/Whiskey/Amber/Comet/Cascade/Cooper Lake)."]
pub const cpuinfo_uarch_cpuinfo_uarch_sky_lake: cpuinfo_uarch = 1049098;
#[doc = " DEPRECATED (Intel Kaby Lake microarchitecture)."]
pub const cpuinfo_uarch_cpuinfo_uarch_kaby_lake: cpuinfo_uarch = 1049098;
#[doc = " Intel Palm Cove microarchitecture (10 nm, Cannon Lake)."]
pub const cpuinfo_uarch_cpuinfo_uarch_palm_cove: cpuinfo_uarch = 1049099;
#[doc = " Intel Sunny Cove microarchitecture (10 nm, Ice Lake)."]
pub const cpuinfo_uarch_cpuinfo_uarch_sunny_cove: cpuinfo_uarch = 1049100;
#[doc = " Pentium 4 with Willamette, Northwood, or Foster cores."]
pub const cpuinfo_uarch_cpuinfo_uarch_willamette: cpuinfo_uarch = 1049344;
#[doc = " Pentium 4 with Prescott and later cores."]
pub const cpuinfo_uarch_cpuinfo_uarch_prescott: cpuinfo_uarch = 1049345;
#[doc = " Intel Atom on 45 nm process."]
pub const cpuinfo_uarch_cpuinfo_uarch_bonnell: cpuinfo_uarch = 1049600;
#[doc = " Intel Atom on 32 nm process."]
pub const cpuinfo_uarch_cpuinfo_uarch_saltwell: cpuinfo_uarch = 1049601;
#[doc = " Intel Silvermont microarchitecture (22 nm out-of-order Atom)."]
pub const cpuinfo_uarch_cpuinfo_uarch_silvermont: cpuinfo_uarch = 1049602;
#[doc = " Intel Airmont microarchitecture (14 nm out-of-order Atom)."]
pub const cpuinfo_uarch_cpuinfo_uarch_airmont: cpuinfo_uarch = 1049603;
#[doc = " Intel Goldmont microarchitecture (Denverton, Apollo Lake)."]
pub const cpuinfo_uarch_cpuinfo_uarch_goldmont: cpuinfo_uarch = 1049604;
#[doc = " Intel Goldmont Plus microarchitecture (Gemini Lake)."]
pub const cpuinfo_uarch_cpuinfo_uarch_goldmont_plus: cpuinfo_uarch = 1049605;
#[doc = " Intel Knights Ferry HPC boards."]
pub const cpuinfo_uarch_cpuinfo_uarch_knights_ferry: cpuinfo_uarch = 1049856;
#[doc = " Intel Knights Corner HPC boards (aka Xeon Phi)."]
pub const cpuinfo_uarch_cpuinfo_uarch_knights_corner: cpuinfo_uarch = 1049857;
#[doc = " Intel Knights Landing microarchitecture (second-gen MIC)."]
pub const cpuinfo_uarch_cpuinfo_uarch_knights_landing: cpuinfo_uarch = 1049858;
#[doc = " Intel Knights Hill microarchitecture (third-gen MIC)."]
pub const cpuinfo_uarch_cpuinfo_uarch_knights_hill: cpuinfo_uarch = 1049859;
#[doc = " Intel Knights Mill Xeon Phi."]
pub const cpuinfo_uarch_cpuinfo_uarch_knights_mill: cpuinfo_uarch = 1049860;
#[doc = " Intel/Marvell XScale series."]
pub const cpuinfo_uarch_cpuinfo_uarch_xscale: cpuinfo_uarch = 1050112;
#[doc = " AMD K5."]
pub const cpuinfo_uarch_cpuinfo_uarch_k5: cpuinfo_uarch = 2097408;
#[doc = " AMD K6 and alike."]
pub const cpuinfo_uarch_cpuinfo_uarch_k6: cpuinfo_uarch = 2097409;
#[doc = " AMD Athlon and Duron."]
pub const cpuinfo_uarch_cpuinfo_uarch_k7: cpuinfo_uarch = 2097410;
#[doc = " AMD Athlon 64, Opteron 64."]
pub const cpuinfo_uarch_cpuinfo_uarch_k8: cpuinfo_uarch = 2097411;
#[doc = " AMD Family 10h (Barcelona, Istambul, Magny-Cours)."]
pub const cpuinfo_uarch_cpuinfo_uarch_k10: cpuinfo_uarch = 2097412;
#[doc = " AMD Bulldozer microarchitecture\n Zambezi FX-series CPUs, Zurich, Valencia and Interlagos Opteron CPUs."]
pub const cpuinfo_uarch_cpuinfo_uarch_bulldozer: cpuinfo_uarch = 2097413;
#[doc = " AMD Piledriver microarchitecture\n Vishera FX-series CPUs, Trinity and Richland APUs, Delhi, Seoul, Abu\n Dhabi Opteron CPUs."]
pub const cpuinfo_uarch_cpuinfo_uarch_piledriver: cpuinfo_uarch = 2097414;
#[doc = " AMD Steamroller microarchitecture (Kaveri APUs)."]
pub const cpuinfo_uarch_cpuinfo_uarch_steamroller: cpuinfo_uarch = 2097415;
#[doc = " AMD Excavator microarchitecture (Carizzo APUs)."]
pub const cpuinfo_uarch_cpuinfo_uarch_excavator: cpuinfo_uarch = 2097416;
#[doc = " AMD Zen microarchitecture (12/14 nm Ryzen and EPYC CPUs)."]
pub const cpuinfo_uarch_cpuinfo_uarch_zen: cpuinfo_uarch = 2097417;
#[doc = " AMD Zen 2 microarchitecture (7 nm Ryzen and EPYC CPUs)."]
pub const cpuinfo_uarch_cpuinfo_uarch_zen2: cpuinfo_uarch = 2097418;
#[doc = " AMD Zen 3 microarchitecture."]
pub const cpuinfo_uarch_cpuinfo_uarch_zen3: cpuinfo_uarch = 2097419;
#[doc = " AMD Zen 4 microarchitecture."]
pub const cpuinfo_uarch_cpuinfo_uarch_zen4: cpuinfo_uarch = 2097420;
#[doc = " AMD Zen 5 microarchitecture."]
pub const cpuinfo_uarch_cpuinfo_uarch_zen5: cpuinfo_uarch = 2097421;
#[doc = " NSC Geode and AMD Geode GX and LX."]
pub const cpuinfo_uarch_cpuinfo_uarch_geode: cpuinfo_uarch = 2097664;
#[doc = " AMD Bobcat mobile microarchitecture."]
pub const cpuinfo_uarch_cpuinfo_uarch_bobcat: cpuinfo_uarch = 2097665;
#[doc = " AMD Jaguar mobile microarchitecture."]
pub const cpuinfo_uarch_cpuinfo_uarch_jaguar: cpuinfo_uarch = 2097666;
#[doc = " AMD Puma mobile microarchitecture."]
pub const cpuinfo_uarch_cpuinfo_uarch_puma: cpuinfo_uarch = 2097667;
#[doc = " ARM7 series."]
pub const cpuinfo_uarch_cpuinfo_uarch_arm7: cpuinfo_uarch = 3145984;
#[doc = " ARM9 series."]
pub const cpuinfo_uarch_cpuinfo_uarch_arm9: cpuinfo_uarch = 3145985;
#[doc = " ARM 1136, ARM 1156, ARM 1176, or ARM 11MPCore."]
pub const cpuinfo_uarch_cpuinfo_uarch_arm11: cpuinfo_uarch = 3145986;
#[doc = " ARM Cortex-A5."]
pub const cpuinfo_uarch_cpuinfo_uarch_cortex_a5: cpuinfo_uarch = 3146245;
#[doc = " ARM Cortex-A7."]
pub const cpuinfo_uarch_cpuinfo_uarch_cortex_a7: cpuinfo_uarch = 3146247;
#[doc = " ARM Cortex-A8."]
pub const cpuinfo_uarch_cpuinfo_uarch_cortex_a8: cpuinfo_uarch = 3146248;
#[doc = " ARM Cortex-A9."]
pub const cpuinfo_uarch_cpuinfo_uarch_cortex_a9: cpuinfo_uarch = 3146249;
#[doc = " ARM Cortex-A12."]
pub const cpuinfo_uarch_cpuinfo_uarch_cortex_a12: cpuinfo_uarch = 3146258;
#[doc = " ARM Cortex-A15."]
pub const cpuinfo_uarch_cpuinfo_uarch_cortex_a15: cpuinfo_uarch = 3146261;
#[doc = " ARM Cortex-A17."]
pub const cpuinfo_uarch_cpuinfo_uarch_cortex_a17: cpuinfo_uarch = 3146263;
#[doc = " ARM Cortex-A32."]
pub const cpuinfo_uarch_cpuinfo_uarch_cortex_a32: cpuinfo_uarch = 3146546;
#[doc = " ARM Cortex-A35."]
pub const cpuinfo_uarch_cpuinfo_uarch_cortex_a35: cpuinfo_uarch = 3146549;
#[doc = " ARM Cortex-A53."]
pub const cpuinfo_uarch_cpuinfo_uarch_cortex_a53: cpuinfo_uarch = 3146579;
#[doc = " ARM Cortex-A55 revision 0 (restricted dual-issue capabilities\ncompared to revision 1+)."]
pub const cpuinfo_uarch_cpuinfo_uarch_cortex_a55r0: cpuinfo_uarch = 3146580;
#[doc = " ARM Cortex-A55."]
pub const cpuinfo_uarch_cpuinfo_uarch_cortex_a55: cpuinfo_uarch = 3146581;
#[doc = " ARM Cortex-A57."]
pub const cpuinfo_uarch_cpuinfo_uarch_cortex_a57: cpuinfo_uarch = 3146583;
#[doc = " ARM Cortex-A65."]
pub const cpuinfo_uarch_cpuinfo_uarch_cortex_a65: cpuinfo_uarch = 3146597;
#[doc = " ARM Cortex-A72."]
pub const cpuinfo_uarch_cpuinfo_uarch_cortex_a72: cpuinfo_uarch = 3146610;
#[doc = " ARM Cortex-A73."]
pub const cpuinfo_uarch_cpuinfo_uarch_cortex_a73: cpuinfo_uarch = 3146611;
#[doc = " ARM Cortex-A75."]
pub const cpuinfo_uarch_cpuinfo_uarch_cortex_a75: cpuinfo_uarch = 3146613;
#[doc = " ARM Cortex-A76."]
pub const cpuinfo_uarch_cpuinfo_uarch_cortex_a76: cpuinfo_uarch = 3146614;
#[doc = " ARM Cortex-A77."]
pub const cpuinfo_uarch_cpuinfo_uarch_cortex_a77: cpuinfo_uarch = 3146615;
#[doc = " ARM Cortex-A78."]
pub const cpuinfo_uarch_cpuinfo_uarch_cortex_a78: cpuinfo_uarch = 3146616;
#[doc = " ARM Neoverse N1."]
pub const cpuinfo_uarch_cpuinfo_uarch_neoverse_n1: cpuinfo_uarch = 3146752;
#[doc = " ARM Neoverse E1."]
pub const cpuinfo_uarch_cpuinfo_uarch_neoverse_e1: cpuinfo_uarch = 3146753;
#[doc = " ARM Neoverse V1."]
pub const cpuinfo_uarch_cpuinfo_uarch_neoverse_v1: cpuinfo_uarch = 3146754;
#[doc = " ARM Neoverse N2."]
pub const cpuinfo_uarch_cpuinfo_uarch_neoverse_n2: cpuinfo_uarch = 3146755;
#[doc = " ARM Neoverse V2."]
pub const cpuinfo_uarch_cpuinfo_uarch_neoverse_v2: cpuinfo_uarch = 3146756;
#[doc = " ARM Cortex-X1."]
pub const cpuinfo_uarch_cpuinfo_uarch_cortex_x1: cpuinfo_uarch = 3147009;
#[doc = " ARM Cortex-X2."]
pub const cpuinfo_uarch_cpuinfo_uarch_cortex_x2: cpuinfo_uarch = 3147010;
#[doc = " ARM Cortex-X3."]
pub const cpuinfo_uarch_cpuinfo_uarch_cortex_x3: cpuinfo_uarch = 3147011;
#[doc = " ARM Cortex-X4."]
pub const cpuinfo_uarch_cpuinfo_uarch_cortex_x4: cpuinfo_uarch = 3147012;
#[doc = " ARM Cortex-A510."]
pub const cpuinfo_uarch_cpuinfo_uarch_cortex_a510: cpuinfo_uarch = 3147089;
#[doc = " ARM Cortex-A520."]
pub const cpuinfo_uarch_cpuinfo_uarch_cortex_a520: cpuinfo_uarch = 3147090;
#[doc = " ARM Cortex-A710."]
pub const cpuinfo_uarch_cpuinfo_uarch_cortex_a710: cpuinfo_uarch = 3147121;
#[doc = " ARM Cortex-A715."]
pub const cpuinfo_uarch_cpuinfo_uarch_cortex_a715: cpuinfo_uarch = 3147122;
#[doc = " ARM Cortex-A720."]
pub const cpuinfo_uarch_cpuinfo_uarch_cortex_a720: cpuinfo_uarch = 3147123;
#[doc = " Qualcomm Scorpion."]
pub const cpuinfo_uarch_cpuinfo_uarch_scorpion: cpuinfo_uarch = 4194560;
#[doc = " Qualcomm Krait."]
pub const cpuinfo_uarch_cpuinfo_uarch_krait: cpuinfo_uarch = 4194561;
#[doc = " Qualcomm Kryo."]
pub const cpuinfo_uarch_cpuinfo_uarch_kryo: cpuinfo_uarch = 4194562;
#[doc = " Qualcomm Falkor."]
pub const cpuinfo_uarch_cpuinfo_uarch_falkor: cpuinfo_uarch = 4194563;
#[doc = " Qualcomm Saphira."]
pub const cpuinfo_uarch_cpuinfo_uarch_saphira: cpuinfo_uarch = 4194564;
#[doc = " Qualcomm Oryon."]
pub const cpuinfo_uarch_cpuinfo_uarch_oryon: cpuinfo_uarch = 4194565;
#[doc = " Nvidia Denver."]
pub const cpuinfo_uarch_cpuinfo_uarch_denver: cpuinfo_uarch = 5243136;
#[doc = " Nvidia Denver 2."]
pub const cpuinfo_uarch_cpuinfo_uarch_denver2: cpuinfo_uarch = 5243137;
#[doc = " Nvidia Carmel."]
pub const cpuinfo_uarch_cpuinfo_uarch_carmel: cpuinfo_uarch = 5243138;
#[doc = " Samsung Exynos M1 (Exynos 8890 big cores)."]
pub const cpuinfo_uarch_cpuinfo_uarch_exynos_m1: cpuinfo_uarch = 6291712;
#[doc = " Samsung Exynos M2 (Exynos 8895 big cores)."]
pub const cpuinfo_uarch_cpuinfo_uarch_exynos_m2: cpuinfo_uarch = 6291713;
#[doc = " Samsung Exynos M3 (Exynos 9810 big cores)."]
pub const cpuinfo_uarch_cpuinfo_uarch_exynos_m3: cpuinfo_uarch = 6291714;
#[doc = " Samsung Exynos M4 (Exynos 9820 big cores)."]
pub const cpuinfo_uarch_cpuinfo_uarch_exynos_m4: cpuinfo_uarch = 6291715;
#[doc = " Samsung Exynos M5 (Exynos 9830 big cores)."]
pub const cpuinfo_uarch_cpuinfo_uarch_exynos_m5: cpuinfo_uarch = 6291716;
#[doc = " Samsung Exynos M5 (Exynos 9830 big cores)."]
pub const cpuinfo_uarch_cpuinfo_uarch_cortex_a76ae: cpuinfo_uarch = 3146614;
#[doc = " Samsung Exynos M5 (Exynos 9830 big cores)."]
pub const cpuinfo_uarch_cpuinfo_uarch_mongoose_m1: cpuinfo_uarch = 6291712;
#[doc = " Samsung Exynos M5 (Exynos 9830 big cores)."]
pub const cpuinfo_uarch_cpuinfo_uarch_mongoose_m2: cpuinfo_uarch = 6291713;
#[doc = " Samsung Exynos M5 (Exynos 9830 big cores)."]
pub const cpuinfo_uarch_cpuinfo_uarch_meerkat_m3: cpuinfo_uarch = 6291714;
#[doc = " Samsung Exynos M5 (Exynos 9830 big cores)."]
pub const cpuinfo_uarch_cpuinfo_uarch_meerkat_m4: cpuinfo_uarch = 6291715;
#[doc = " Apple A6 and A6X processors."]
pub const cpuinfo_uarch_cpuinfo_uarch_swift: cpuinfo_uarch = 7340288;
#[doc = " Apple A7 processor."]
pub const cpuinfo_uarch_cpuinfo_uarch_cyclone: cpuinfo_uarch = 7340289;
#[doc = " Apple A8 and A8X processor."]
pub const cpuinfo_uarch_cpuinfo_uarch_typhoon: cpuinfo_uarch = 7340290;
#[doc = " Apple A9 and A9X processor."]
pub const cpuinfo_uarch_cpuinfo_uarch_twister: cpuinfo_uarch = 7340291;
#[doc = " Apple A10 and A10X processor."]
pub const cpuinfo_uarch_cpuinfo_uarch_hurricane: cpuinfo_uarch = 7340292;
#[doc = " Apple A11 processor (big cores)."]
pub const cpuinfo_uarch_cpuinfo_uarch_monsoon: cpuinfo_uarch = 7340293;
#[doc = " Apple A11 processor (little cores)."]
pub const cpuinfo_uarch_cpuinfo_uarch_mistral: cpuinfo_uarch = 7340294;
#[doc = " Apple A12 processor (big cores)."]
pub const cpuinfo_uarch_cpuinfo_uarch_vortex: cpuinfo_uarch = 7340295;
#[doc = " Apple A12 processor (little cores)."]
pub const cpuinfo_uarch_cpuinfo_uarch_tempest: cpuinfo_uarch = 7340296;
#[doc = " Apple A13 processor (big cores)."]
pub const cpuinfo_uarch_cpuinfo_uarch_lightning: cpuinfo_uarch = 7340297;
#[doc = " Apple A13 processor (little cores)."]
pub const cpuinfo_uarch_cpuinfo_uarch_thunder: cpuinfo_uarch = 7340298;
#[doc = " Apple A14 / M1 processor (big cores)."]
pub const cpuinfo_uarch_cpuinfo_uarch_firestorm: cpuinfo_uarch = 7340299;
#[doc = " Apple A14 / M1 processor (little cores)."]
pub const cpuinfo_uarch_cpuinfo_uarch_icestorm: cpuinfo_uarch = 7340300;
#[doc = " Apple A15 / M2 processor (big cores)."]
pub const cpuinfo_uarch_cpuinfo_uarch_avalanche: cpuinfo_uarch = 7340301;
#[doc = " Apple A15 / M2 processor (little cores)."]
pub const cpuinfo_uarch_cpuinfo_uarch_blizzard: cpuinfo_uarch = 7340302;
#[doc = " Cavium ThunderX."]
pub const cpuinfo_uarch_cpuinfo_uarch_thunderx: cpuinfo_uarch = 8388864;
#[doc = " Cavium ThunderX2 (originally Broadcom Vulkan)."]
pub const cpuinfo_uarch_cpuinfo_uarch_thunderx2: cpuinfo_uarch = 8389120;
#[doc = " Marvell PJ4."]
pub const cpuinfo_uarch_cpuinfo_uarch_pj4: cpuinfo_uarch = 9437440;
#[doc = " Broadcom Brahma B15."]
pub const cpuinfo_uarch_cpuinfo_uarch_brahma_b15: cpuinfo_uarch = 10486016;
#[doc = " Broadcom Brahma B53."]
pub const cpuinfo_uarch_cpuinfo_uarch_brahma_b53: cpuinfo_uarch = 10486017;
#[doc = " Applied Micro X-Gene."]
pub const cpuinfo_uarch_cpuinfo_uarch_xgene: cpuinfo_uarch = 11534592;
#[doc = " Applied Micro X-Gene."]
pub const cpuinfo_uarch_cpuinfo_uarch_dhyana: cpuinfo_uarch = 16777472;
#[doc = " HiSilicon TaiShan v110 (Huawei Kunpeng 920 series processors)."]
pub const cpuinfo_uarch_cpuinfo_uarch_taishan_v110: cpuinfo_uarch = 12583168;
#[doc = " Processor microarchitecture\n\n Processors with different microarchitectures often have different instruction\n performance characteristics, and may have dramatically different pipeline\n organization."]
pub type cpuinfo_uarch = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cpuinfo_processor {
    #[doc = " SMT (hyperthread) ID within a core"]
    pub smt_id: u32,
    #[doc = " Core containing this logical processor"]
    pub core: *const cpuinfo_core,
    #[doc = " Cluster of cores containing this logical processor"]
    pub cluster: *const cpuinfo_cluster,
    #[doc = " Physical package containing this logical processor"]
    pub package: *const cpuinfo_package,
    #[doc = " Windows-specific ID for the group containing the logical processor."]
    pub windows_group_id: u16,
    #[doc = " Windows-specific ID of the logical processor within its group:\n - Bit <windows_processor_id> in the KAFFINITY mask identifies this\n logical processor within its group."]
    pub windows_processor_id: u16,
    #[doc = " APIC ID (unique x86-specific ID of the logical processor)"]
    pub apic_id: u32,
    pub cache: cpuinfo_processor__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cpuinfo_processor__bindgen_ty_1 {
    #[doc = " Level 1 instruction cache"]
    pub l1i: *const cpuinfo_cache,
    #[doc = " Level 1 data cache"]
    pub l1d: *const cpuinfo_cache,
    #[doc = " Level 2 unified or data cache"]
    pub l2: *const cpuinfo_cache,
    #[doc = " Level 3 unified or data cache"]
    pub l3: *const cpuinfo_cache,
    #[doc = " Level 4 unified or data cache"]
    pub l4: *const cpuinfo_cache,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cpuinfo_core {
    #[doc = " Index of the first logical processor on this core."]
    pub processor_start: u32,
    #[doc = " Number of logical processors on this core"]
    pub processor_count: u32,
    #[doc = " Core ID within a package"]
    pub core_id: u32,
    #[doc = " Cluster containing this core"]
    pub cluster: *const cpuinfo_cluster,
    #[doc = " Physical package containing this core."]
    pub package: *const cpuinfo_package,
    #[doc = " Vendor of the CPU microarchitecture for this core"]
    pub vendor: cpuinfo_vendor,
    #[doc = " CPU microarchitecture for this core"]
    pub uarch: cpuinfo_uarch,
    #[doc = " Value of CPUID leaf 1 EAX register for this core"]
    pub cpuid: u32,
    #[doc = " Clock rate (non-Turbo) of the core, in Hz"]
    pub frequency: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cpuinfo_cluster {
    #[doc = " Index of the first logical processor in the cluster"]
    pub processor_start: u32,
    #[doc = " Number of logical processors in the cluster"]
    pub processor_count: u32,
    #[doc = " Index of the first core in the cluster"]
    pub core_start: u32,
    #[doc = " Number of cores on the cluster"]
    pub core_count: u32,
    #[doc = " Cluster ID within a package"]
    pub cluster_id: u32,
    #[doc = " Physical package containing the cluster"]
    pub package: *const cpuinfo_package,
    #[doc = " CPU microarchitecture vendor of the cores in the cluster"]
    pub vendor: cpuinfo_vendor,
    #[doc = " CPU microarchitecture of the cores in the cluster"]
    pub uarch: cpuinfo_uarch,
    #[doc = " Value of CPUID leaf 1 EAX register of the cores in the cluster"]
    pub cpuid: u32,
    #[doc = " Clock rate (non-Turbo) of the cores in the cluster, in Hz"]
    pub frequency: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cpuinfo_package {
    #[doc = " SoC or processor chip model name"]
    pub name: [::std::os::raw::c_char; 48usize],
    #[doc = " Index of the first logical processor on this physical package"]
    pub processor_start: u32,
    #[doc = " Number of logical processors on this physical package"]
    pub processor_count: u32,
    #[doc = " Index of the first core on this physical package"]
    pub core_start: u32,
    #[doc = " Number of cores on this physical package"]
    pub core_count: u32,
    #[doc = " Index of the first cluster of cores on this physical package"]
    pub cluster_start: u32,
    #[doc = " Number of clusters of cores on this physical package"]
    pub cluster_count: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cpuinfo_uarch_info {
    #[doc = " Type of CPU microarchitecture"]
    pub uarch: cpuinfo_uarch,
    #[doc = " Value of CPUID leaf 1 EAX register for the microarchitecture"]
    pub cpuid: u32,
    #[doc = " Number of logical processors with the microarchitecture"]
    pub processor_count: u32,
    #[doc = " Number of cores with the microarchitecture"]
    pub core_count: u32,
}
extern "C" {
    pub fn cpuinfo_initialize() -> bool;
}
extern "C" {
    pub fn cpuinfo_deinitialize();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cpuinfo_x86_isa {
    pub rdtscp: bool,
    pub rdpid: bool,
    pub sysenter: bool,
    pub msr: bool,
    pub clzero: bool,
    pub clflush: bool,
    pub clflushopt: bool,
    pub mwait: bool,
    pub mwaitx: bool,
    pub fxsave: bool,
    pub xsave: bool,
    pub three_d_now: bool,
    pub three_d_now_plus: bool,
    pub prefetch: bool,
    pub prefetchw: bool,
    pub prefetchwt1: bool,
    pub sse3: bool,
    pub ssse3: bool,
    pub sse4_1: bool,
    pub sse4_2: bool,
    pub sse4a: bool,
    pub misaligned_sse: bool,
    pub avx: bool,
    pub avxvnni: bool,
    pub fma3: bool,
    pub fma4: bool,
    pub xop: bool,
    pub f16c: bool,
    pub avx2: bool,
    pub avx512f: bool,
    pub avx512pf: bool,
    pub avx512er: bool,
    pub avx512cd: bool,
    pub avx512dq: bool,
    pub avx512bw: bool,
    pub avx512vl: bool,
    pub avx512ifma: bool,
    pub avx512vbmi: bool,
    pub avx512vbmi2: bool,
    pub avx512bitalg: bool,
    pub avx512vpopcntdq: bool,
    pub avx512vnni: bool,
    pub avx512bf16: bool,
    pub avx512fp16: bool,
    pub avx512vp2intersect: bool,
    pub avx512_4vnniw: bool,
    pub avx512_4fmaps: bool,
    pub avx10_1: bool,
    pub avx10_2: bool,
    pub amx_bf16: bool,
    pub amx_tile: bool,
    pub amx_int8: bool,
    pub amx_fp16: bool,
    pub avx_vnni_int8: bool,
    pub avx_vnni_int16: bool,
    pub avx_ne_convert: bool,
    pub hle: bool,
    pub rtm: bool,
    pub xtest: bool,
    pub mpx: bool,
    pub cmpxchg16b: bool,
    pub clwb: bool,
    pub movbe: bool,
    pub lahf_sahf: bool,
    pub fs_gs_base: bool,
    pub lzcnt: bool,
    pub popcnt: bool,
    pub tbm: bool,
    pub bmi: bool,
    pub bmi2: bool,
    pub adx: bool,
    pub aes: bool,
    pub vaes: bool,
    pub pclmulqdq: bool,
    pub vpclmulqdq: bool,
    pub gfni: bool,
    pub rdrand: bool,
    pub rdseed: bool,
    pub sha: bool,
    pub rng: bool,
    pub ace: bool,
    pub ace2: bool,
    pub phe: bool,
    pub pmm: bool,
    pub lwp: bool,
}
extern "C" {
    pub static mut cpuinfo_isa: cpuinfo_x86_isa;
}
extern "C" {
    pub fn cpuinfo_get_processors() -> *const cpuinfo_processor;
}
extern "C" {
    pub fn cpuinfo_get_cores() -> *const cpuinfo_core;
}
extern "C" {
    pub fn cpuinfo_get_clusters() -> *const cpuinfo_cluster;
}
extern "C" {
    pub fn cpuinfo_get_packages() -> *const cpuinfo_package;
}
extern "C" {
    pub fn cpuinfo_get_uarchs() -> *const cpuinfo_uarch_info;
}
extern "C" {
    pub fn cpuinfo_get_l1i_caches() -> *const cpuinfo_cache;
}
extern "C" {
    pub fn cpuinfo_get_l1d_caches() -> *const cpuinfo_cache;
}
extern "C" {
    pub fn cpuinfo_get_l2_caches() -> *const cpuinfo_cache;
}
extern "C" {
    pub fn cpuinfo_get_l3_caches() -> *const cpuinfo_cache;
}
extern "C" {
    pub fn cpuinfo_get_l4_caches() -> *const cpuinfo_cache;
}
extern "C" {
    pub fn cpuinfo_get_processor(index: u32) -> *const cpuinfo_processor;
}
extern "C" {
    pub fn cpuinfo_get_core(index: u32) -> *const cpuinfo_core;
}
extern "C" {
    pub fn cpuinfo_get_cluster(index: u32) -> *const cpuinfo_cluster;
}
extern "C" {
    pub fn cpuinfo_get_package(index: u32) -> *const cpuinfo_package;
}
extern "C" {
    pub fn cpuinfo_get_uarch(index: u32) -> *const cpuinfo_uarch_info;
}
extern "C" {
    pub fn cpuinfo_get_l1i_cache(index: u32) -> *const cpuinfo_cache;
}
extern "C" {
    pub fn cpuinfo_get_l1d_cache(index: u32) -> *const cpuinfo_cache;
}
extern "C" {
    pub fn cpuinfo_get_l2_cache(index: u32) -> *const cpuinfo_cache;
}
extern "C" {
    pub fn cpuinfo_get_l3_cache(index: u32) -> *const cpuinfo_cache;
}
extern "C" {
    pub fn cpuinfo_get_l4_cache(index: u32) -> *const cpuinfo_cache;
}
extern "C" {
    pub fn cpuinfo_get_processors_count() -> u32;
}
extern "C" {
    pub fn cpuinfo_get_cores_count() -> u32;
}
extern "C" {
    pub fn cpuinfo_get_clusters_count() -> u32;
}
extern "C" {
    pub fn cpuinfo_get_packages_count() -> u32;
}
extern "C" {
    pub fn cpuinfo_get_uarchs_count() -> u32;
}
extern "C" {
    pub fn cpuinfo_get_l1i_caches_count() -> u32;
}
extern "C" {
    pub fn cpuinfo_get_l1d_caches_count() -> u32;
}
extern "C" {
    pub fn cpuinfo_get_l2_caches_count() -> u32;
}
extern "C" {
    pub fn cpuinfo_get_l3_caches_count() -> u32;
}
extern "C" {
    pub fn cpuinfo_get_l4_caches_count() -> u32;
}
extern "C" {
    #[doc = " Returns upper bound on cache size."]
    pub fn cpuinfo_get_max_cache_size() -> u32;
}
extern "C" {
    #[doc = " Identify the logical processor that executes the current thread.\n\n There is no guarantee that the thread will stay on the same logical processor\n for any time. Callers should treat the result as only a hint, and be prepared\n to handle NULL return value."]
    pub fn cpuinfo_get_current_processor() -> *const cpuinfo_processor;
}
extern "C" {
    #[doc = " Identify the core that executes the current thread.\n\n There is no guarantee that the thread will stay on the same core for any\n time. Callers should treat the result as only a hint, and be prepared to\n handle NULL return value."]
    pub fn cpuinfo_get_current_core() -> *const cpuinfo_core;
}
extern "C" {
    #[doc = " Identify the microarchitecture index of the core that executes the current\n thread. If the system does not support such identification, the function\n returns 0.\n\n There is no guarantee that the thread will stay on the same type of core for\n any time. Callers should treat the result as only a hint."]
    pub fn cpuinfo_get_current_uarch_index() -> u32;
}
extern "C" {
    #[doc = " Identify the microarchitecture index of the core that executes the current\n thread. If the system does not support such identification, the function\n returns the user-specified default value.\n\n There is no guarantee that the thread will stay on the same type of core for\n any time. Callers should treat the result as only a hint."]
    pub fn cpuinfo_get_current_uarch_index_with_default(default_uarch_index: u32) -> u32;
}
